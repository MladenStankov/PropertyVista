import { Repository } from 'typeorm';
import { Listing } from '../entity/listing.entity';
import { ListingDto } from '../dto/listing.dto';
import { User } from 'src/users/entity/user.entity';
import { PublishListingDto } from '../dto/publish-listing.dto';
import { ListingLocationsService } from './listing-locations.service';
import { ListingImagesService } from './listing-images.service';
import { ListingAmenitiesService } from './listing-amenities.service';
import { ListingRoomsService } from './listing-rooms.service';
import { IListing } from '../dto/get-all-listing.dto';
import { IFilter } from '../dto/filter-inteface';
import { SortType } from '../types/sort-type.type';
import { IListingExtended } from '../dto/get-by-uuid-listing.dto';
import { ListingViewsService } from './listing-views.service';
import { MostViewedListingsDto } from '../dto/most-viewed-listings.dto';
import { Request } from 'express';
import { UpdateListingDto } from '../dto/update-listing.dto';
import { IForEditing } from '../dto/get-for-editing.dto';
import { ListingFavourite } from '../entity/listing-favourite.entity';
import { IMapListing } from '../dto/map-listings.dto';
export declare class ListingsService {
    private listingRepository;
    private listingLocationsService;
    private listingImagesService;
    private listingAmenitiesService;
    private listingRoomsService;
    private listingViewsService;
    private listingFavouriteRepository;
    constructor(listingRepository: Repository<Listing>, listingLocationsService: ListingLocationsService, listingImagesService: ListingImagesService, listingAmenitiesService: ListingAmenitiesService, listingRoomsService: ListingRoomsService, listingViewsService: ListingViewsService, listingFavouriteRepository: Repository<ListingFavourite>);
    create(createListingDto: ListingDto): Promise<Listing>;
    findById(id: number): Promise<Listing>;
    findByUuid(uuid: string): Promise<Listing>;
    getByUser(user: User): Promise<Listing[]>;
    publish(publishListingDto: PublishListingDto): Promise<string>;
    private getNumberOfRooms;
    getAll(filter?: IFilter, sort?: SortType, search?: string, user?: User | null): Promise<IListing[]>;
    getByUUID(uuid: string, user?: User): Promise<IListingExtended>;
    getForEditingByUUID(uuid: string, user: User): Promise<IForEditing>;
    getTopViewed(): Promise<MostViewedListingsDto[]>;
    deleteByUuid(uuid: string, req: Request): Promise<void>;
    updateListingByUuid(uuid: string, updateData: UpdateListingDto): Promise<string>;
    favourite(uuid: string, req: Request): Promise<void>;
    deleteFavourite(uuid: string, req: Request): Promise<void>;
    getMapListings(): Promise<IMapListing[]>;
}
